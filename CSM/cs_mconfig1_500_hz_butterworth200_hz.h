/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Sat Aug 29 17:11:18 2020.
 */

#ifndef CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_H
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05429_MSG0_FRAME_ID (0x615u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05429_MSG1_FRAME_ID (0x616u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05431_MSG0_FRAME_ID (0x600u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05431_MSG1_FRAME_ID (0x601u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05432_MSG0_FRAME_ID (0x602u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05432_MSG1_FRAME_ID (0x603u)

/* Frame lengths in bytes. */
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05429_MSG0_LENGTH (8u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05429_MSG1_LENGTH (8u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05431_MSG0_LENGTH (8u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05431_MSG1_LENGTH (8u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05432_MSG0_LENGTH (8u)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05432_MSG1_LENGTH (8u)

/* Extended or standard frame types. */
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05429_MSG0_IS_EXTENDED (0)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05429_MSG1_IS_EXTENDED (0)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05431_MSG0_IS_EXTENDED (0)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05431_MSG1_IS_EXTENDED (0)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05432_MSG0_IS_EXTENDED (0)
#define CS_MCONFIG1_500_HZ_BUTTERWORTH200_HZ_ADMM_05432_MSG1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message ADMM_05429_MSG0.
 *
 * All signal values are as on the CAN bus.
 */
struct cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_t {
    /**
     * Range: 21871.97252257337387341351811..-21871.97252257337387341351811 (-50..50 g)
     * Scale: -0.00228603067
     * Offset: 0
     */
    int16_t d_ac_x_fm;

    /**
     * Range: 21708.13744380447022128502501..-21708.13744380447022128502501 (-50..50 g)
     * Scale: -0.00230328374
     * Offset: 0
     */
    int16_t d_ac_y_fm;

    /**
     * Range: -32766.99997422875452026908457..32766.99997422875452026908457 (-20..20 V)
     * Scale: 0.00061037019
     * Offset: 0
     */
    int16_t m3_a;

    /**
     * Range: -21790.05502498781097006984719..21790.05502498781097006984719 (-50..50 g)
     * Scale: 0.00229462477
     * Offset: 0
     */
    int16_t d_ac_z_fm;
};

/**
 * Signals in message ADMM_05429_MSG1.
 *
 * All signal values are as on the CAN bus.
 */
struct cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_t {
    /**
     * Range: 32668.69889059646726047863708..-32668.69889059646726047863708 (-50..50 g)
     * Scale: -0.00153051703
     * Offset: 0
     */
    int16_t d_ac_x_rm;

    /**
     * Range: 32603.16502136315867391816699..-32603.16502136315867391816699 (-50..50 g)
     * Scale: -0.00153359344
     * Offset: 0
     */
    int16_t d_ac_y_rm;

    /**
     * Range: -32832.53387864407308543054208..32832.53387864407308543054208 (-50..50 g)
     * Scale: 0.00152287972
     * Offset: 0
     */
    int16_t d_ac_z_rmxxx;

    /**
     * Range: -32504.86398721596701328390904..32504.86398721596701328390904 (-200..200 g)
     * Scale: 0.0061529253
     * Offset: 0
     */
    int16_t d_ac_x_wl_fl;
};

/**
 * Signals in message ADMM_05431_MSG0.
 *
 * All signal values are as on the CAN bus.
 */
struct cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_t {
    /**
     * Range: 32275.49494923361579039085185..-32275.49494923361579039085185 (-200..200 g)
     * Scale: -0.00619665168
     * Offset: 0
     */
    int16_t d_ac_y_wl_fl;

    /**
     * Range: -33061.90298954273333368191600..33061.90298954273333368191600 (-200..200 g)
     * Scale: 0.00604925857
     * Offset: 0
     */
    int16_t d_ac_z_wl_fl;

    /**
     * Range: -31842.97059378884867289763016..31842.97059378884867289763016 (-200..200 g)
     * Scale: 0.00628082105
     * Offset: 0
     */
    int16_t d_ac_x_wl_fr;

    /**
     * Range: 32678.52908274141637937514832..-32678.52908274141637937514832 (-200..200 g)
     * Scale: -0.00612022651
     * Offset: 0
     */
    int16_t d_ac_y_wl_fr;
};

/**
 * Signals in message ADMM_05431_MSG1.
 *
 * All signal values are as on the CAN bus.
 */
struct cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_t {
    /**
     * Range: -31960.93177519785159127982028..31960.93177519785159127982028 (-200..200 g)
     * Scale: 0.00625763984
     * Offset: 0
     */
    int16_t d_ac_z_wl_fr;

    /**
     * Range: -21691.75399360104103065766090..21691.75399360104103065766090 (-200..200 g)
     * Scale: 0.0092200935
     * Offset: 0
     */
    int16_t d_ac_x_wl_rl;

    /**
     * Range: 21790.05497750716127433078901..-21790.05497750716127433078901 (-200..200 g)
     * Scale: -0.0091784991
     * Offset: 0
     */
    int16_t d_ac_y_wl_rl;

    /**
     * Range: 21691.75399360104103065766090..-21691.75399360104103065766090 (-200..200 g)
     * Scale: -0.0092200935
     * Offset: 0
     */
    int16_t d_ac_z_wl_rl;
};

/**
 * Signals in message ADMM_05432_MSG0.
 *
 * All signal values are as on the CAN bus.
 */
struct cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_t {
    /**
     * Range: -21822.82197704429641250799614..21822.82197704429641250799614 (-200..200 g)
     * Scale: 0.00916471757
     * Offset: 0
     */
    int16_t d_ac_x_wl_rr;

    /**
     * Range: -21626.21998724273608196548447..21626.21998724273608196548447 (-200..200 g)
     * Scale: 0.00924803318
     * Offset: 0
     */
    int16_t d_ac_y_wl_rr;

    /**
     * Range: -21757.28797946587193907893224..21757.28797946587193907893224 (-200..200 g)
     * Scale: 0.00919232214
     * Offset: 0
     */
    int16_t d_ac_z_wl_rr;

    /**
     * Range: -16383.49998711437726013454228..16383.49998711437726013454228 (-600..600 mm)
     * Scale: 0.0366222114
     * Offset: 0
     */
    int16_t d_dis_dmp_fl;
};

/**
 * Signals in message ADMM_05432_MSG1.
 *
 * All signal values are as on the CAN bus.
 */
struct cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_t {
    /**
     * Range: -16383.49998711437726013454228..16383.49998711437726013454228 (-600..600 mm)
     * Scale: 0.0366222114
     * Offset: 0
     */
    int16_t d_dis_dmp_fr;

    /**
     * Range: -8191.749993557188630067271142..8191.749993557188630067271142 (-600..600 mm)
     * Scale: 0.0732444228
     * Offset: 0
     */
    int16_t d_dis_dmp_rl;

    /**
     * Range: -16383.49998711437726013454228..16383.49998711437726013454228 (-600..600 mm)
     * Scale: 0.0366222114
     * Offset: 0
     */
    int16_t d_dis_dmp_rr;

    /**
     * Range: -32832.53387864407308543054208..32832.53387864407308543054208 (-50..50 g)
     * Scale: 0.00152287972
     * Offset: 0
     */
    int16_t d_ac_z_rm;
};

/**
 * Pack message ADMM_05429_MSG0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_pack(
    uint8_t *dst_p,
    const struct cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_t *src_p,
    size_t size);

/**
 * Unpack message ADMM_05429_MSG0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_unpack(
    struct cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_x_fm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_x_fm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_x_fm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_y_fm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_y_fm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_y_fm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_m3_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_m3_a_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_m3_a_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_z_fm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_z_fm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg0_d_ac_z_fm_is_in_range(int16_t value);

/**
 * Pack message ADMM_05429_MSG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_pack(
    uint8_t *dst_p,
    const struct cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_t *src_p,
    size_t size);

/**
 * Unpack message ADMM_05429_MSG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_unpack(
    struct cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_x_rm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_x_rm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_x_rm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_y_rm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_y_rm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_y_rm_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_z_rmxxx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_z_rmxxx_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_z_rmxxx_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_x_wl_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_x_wl_fl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05429_msg1_d_ac_x_wl_fl_is_in_range(int16_t value);

/**
 * Pack message ADMM_05431_MSG0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_pack(
    uint8_t *dst_p,
    const struct cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_t *src_p,
    size_t size);

/**
 * Unpack message ADMM_05431_MSG0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_unpack(
    struct cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_y_wl_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_y_wl_fl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_y_wl_fl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_z_wl_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_z_wl_fl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_z_wl_fl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_x_wl_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_x_wl_fr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_x_wl_fr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_y_wl_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_y_wl_fr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg0_d_ac_y_wl_fr_is_in_range(int16_t value);

/**
 * Pack message ADMM_05431_MSG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_pack(
    uint8_t *dst_p,
    const struct cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_t *src_p,
    size_t size);

/**
 * Unpack message ADMM_05431_MSG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_unpack(
    struct cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_z_wl_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_z_wl_fr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_z_wl_fr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_x_wl_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_x_wl_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_x_wl_rl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_y_wl_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_y_wl_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_y_wl_rl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_z_wl_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_z_wl_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05431_msg1_d_ac_z_wl_rl_is_in_range(int16_t value);

/**
 * Pack message ADMM_05432_MSG0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_pack(
    uint8_t *dst_p,
    const struct cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_t *src_p,
    size_t size);

/**
 * Unpack message ADMM_05432_MSG0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_unpack(
    struct cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_x_wl_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_x_wl_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_x_wl_rr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_y_wl_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_y_wl_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_y_wl_rr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_z_wl_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_z_wl_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_ac_z_wl_rr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_dis_dmp_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_dis_dmp_fl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg0_d_dis_dmp_fl_is_in_range(int16_t value);

/**
 * Pack message ADMM_05432_MSG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_pack(
    uint8_t *dst_p,
    const struct cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_t *src_p,
    size_t size);

/**
 * Unpack message ADMM_05432_MSG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_unpack(
    struct cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_fr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_fr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_rl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_dis_dmp_rr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_ac_z_rm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_ac_z_rm_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cs_mconfig1_500_hz_butterworth200_hz_admm_05432_msg1_d_ac_z_rm_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
